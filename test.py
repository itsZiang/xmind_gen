def main():
    st.markdown("""
    <div style='text-align: center; padding: 2rem 0;'>
        <h1 style='color: #4F46E5; font-size: 3rem; margin-bottom: 0.5rem;'>
            üß† Agent AI - T·∫°o File XMindMark
        </h1>
        <p style='color: #6B7280; font-size: 1.2rem;'>
            T√≥m t·∫Øt file PDF, DOCX, MD th√†nh file XMindMark v√† hi·ªÉn th·ªã mindmap
        </p>
    </div>
    """, unsafe_allow_html=True)

    agent = MindMapAgent()

    with st.sidebar:
        st.header("üîß C·∫•u h√¨nh")
        provider = st.selectbox("Provider:", ["openai", "g4f"], key="provider_select")
        st.session_state.selected_provider = provider
        
        api_key = ""
        if provider == "openai":
            api_key = st.text_input("OpenAI API Key:", type="password", value="ml-BRLNIyva65v4ltx1diADpn5mgY5ka9W9jpUX2DSy00iECWTiYe-AU7900zpWC0oJJDmI5qDFDXQxD5Ccc0m2lIQDqulCsPxlxfjRs")
        
        agent.llm_provider.initialize_client(provider, api_key)
        models = agent.llm_provider.get_available_models()
        model = st.selectbox("Model:", models, key="model_select")
        
        st.divider()
        
        st.subheader("üõ†Ô∏è Tr·∫°ng th√°i XMindMark CLI")
        cli_status = agent.check_xmindmark_cli()
        if cli_status:
            st.success("‚úÖ XMindMark CLI ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
            st.info("üéØ SVG v√† XMind s·∫Ω ƒë∆∞·ª£c t·∫°o b·∫±ng CLI ch√≠nh th·ª©c")
        else:
            st.error("‚ùå XMindMark CLI ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
            st.warning("‚ö†Ô∏è SVG s·∫Ω ƒë∆∞·ª£c t·∫°o b·∫±ng ph∆∞∆°ng th·ª©c d·ª± ph√≤ng (Graphviz)")
            st.info("üìã ƒê·ªÉ c√†i ƒë·∫∑t:\n```bash\nnpm install -g xmindmark\n```")
        
        st.divider()
        uploaded_file = st.file_uploader(
            "üìÑ T·∫£i l√™n file",
            type=['pdf', 'docx', 'md'],
            help="Ch·ªçn file PDF, DOCX ho·∫∑c MD ƒë·ªÉ t√≥m t·∫Øt"
        )
        
        if uploaded_file:
            st.subheader("üìä Th√¥ng tin file")
            st.write(f"**T√™n file:** {uploaded_file.name}")
            st.write(f"**K√≠ch th∆∞·ªõc:** {uploaded_file.size:,} bytes")
            st.write(f"**Lo·∫°i:** {uploaded_file.type}")
            
        if st.session_state.extracted_text:
            st.subheader("üìù VƒÉn b·∫£n g·ªëc")
            with st.expander("Xem chi ti·∫øt", expanded=False):
                display_text = st.session_state.extracted_text[:2000] + "..." if len(st.session_state.extracted_text) > 2000 else st.session_state.extracted_text
                st.text_area(
                    "N·ªôi dung (ƒë√£ gi·ªõi h·∫°n):",
                    value=display_text,
                    height=200,
                    disabled=True
                )
        
        st.divider()
        st.subheader("üìñ H∆∞·ªõng d·∫´n")
        st.markdown("""
        1. **C·∫•u h√¨nh LLM**: Ch·ªçn provider, nh·∫≠p API Key (n·∫øu c·∫ßn) v√† ch·ªçn model
        2. **C√†i ƒë·∫∑t CLI**: ƒê·∫£m b·∫£o xmindmark CLI ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t
        3. **M√¥ t·∫£ y√™u c·∫ßu**: N√™u c√°ch b·∫°n mu·ªën t√≥m t·∫Øt
        4. **T·∫£i file**: Ch·ªçn file PDF, DOCX ho·∫∑c MD
        5. **X·ª≠ l√Ω AI**: T·∫°o file XMindMark v√† ·∫£nh mindmap
        6. **Ch·ªânh s·ª≠a**: ƒêi·ªÅu ch·ªânh n·ªôi dung file, ·∫£nh s·∫Ω t·ª± c·∫≠p nh·∫≠t
        7. **T·∫£i v·ªÅ**: L∆∞u file .xmind s·ª≠ d·ª•ng CLI
        """)

    st.subheader("üìù Y√™u c·∫ßu t√≥m t·∫Øt")
    user_requirements = st.text_area(
        "M√¥ t·∫£ c√°ch b·∫°n mu·ªën AI t√≥m t·∫Øt v√† t·∫°o b·∫£n ƒë·ªì t∆∞ duy:",
        value=st.session_state.get('user_requirements', ''),
        height=100,
        placeholder="V√≠ d·ª•:\n- T√≥m t·∫Øt b√†i gi·∫£ng, t·∫≠p trung v√†o c√°c kh√°i ni·ªám ch√≠nh\n- Ph√¢n lo·∫°i b√°o c√°o theo m·ª•c ti√™u, ph∆∞∆°ng ph√°p, k·∫øt qu·∫£\n- Tr√≠ch xu·∫•t c√°c √Ω t∆∞·ªüng ch√≠nh t·ª´ t√†i li·ªáu"
    )
    st.session_state.user_requirements = user_requirements
    
    if uploaded_file is not None and user_requirements.strip():
        if st.button("üöÄ T√≥m t·∫Øt v√† t·∫°o file XMindMark", type="primary"):
            with st.spinner("ü§ñ AI ƒëang t√≥m t·∫Øt v√† t·∫°o file XMindMark..."):
                extracted_text = agent.extract_text_from_file(uploaded_file)
                
                if len(extracted_text) > 50000:
                    st.warning("‚ö†Ô∏è VƒÉn b·∫£n qu√° d√†i, x·ª≠ l√Ω ph·∫ßn ƒë·∫ßu ti√™n...")
                    extracted_text = extracted_text[:50000]
                st.session_state.extracted_text = extracted_text
                
                if extracted_text:
                    xmindmark_content = agent.process_text_with_llm(
                        extracted_text,
                        user_requirements,
                        provider,
                        api_key,
                        model
                    )
                    st.session_state.xmindmark_content = xmindmark_content
                    st.success("‚úÖ Ho√†n th√†nh! File XMindMark v√† ·∫£nh mindmap ƒë√£ ƒë∆∞·ª£c t·∫°o.")

    if st.session_state.xmindmark_content:
        st.divider()
        
        col_mindmap, col_content = st.columns([3, 2])
        
        with col_mindmap:
            st.subheader("üñºÔ∏è B·∫£n ƒê·ªì T∆∞ Duy")
            if st.session_state.mindmap_svg:
                if "xmindmark" in st.session_state.mindmap_svg.lower() or "xmlns" in st.session_state.mindmap_svg:
                    try:
                        st.image(f"data:image/svg+xml;base64,{base64.b64encode(st.session_state.mindmap_svg.encode('utf-8')).decode('utf-8')}", use_container_width=True)
                    except Exception as e:
                        st.error(f"L·ªói hi·ªÉn th·ªã SVG: {str(e)}")
                        st.text_area("SVG Content (debug):", value=st.session_state.mindmap_svg[:500] + "...", height=100)
                else:
                    st.error("SVG kh√¥ng h·ª£p l·ªá")
            else:
                st.info("üîÑ ƒêang t·∫°o ·∫£nh mindmap...")
        
        with col_content:
            st.subheader("üìÑ Ch·ªânh s·ª≠a XMindMark")
            
            st.markdown("### ü§ñ Ch·ªânh s·ª≠a b·∫±ng AI")
            with st.form(key="llm_edit_form", clear_on_submit=True):
                edit_request = st.text_area(
                    "Y√™u c·∫ßu ch·ªânh s·ª≠a:",
                    placeholder="V√≠ d·ª•:\n- Th√™m chi ti·∫øt cho nh√°nh 'Ph∆∞∆°ng ph√°p'\n- X√≥a nh√°nh kh√¥ng c·∫ßn thi·∫øt\n- S·∫Øp x·∫øp l·∫°i c·∫•u tr√∫c theo th·ª© t·ª± logic\n- R√∫t g·ªçn c√°c t·ª´ kh√≥a qu√° d√†i",
                    height=100,
                    key="edit_request_input"
                )
                
                col_edit_btn, col_edit_info = st.columns([1, 2])
                with col_edit_btn:
                    edit_with_llm = st.form_submit_button("‚ú® Ch·ªânh s·ª≠a b·∫±ng AI", type="secondary")
                with col_edit_info:
                    st.caption("üí° AI s·∫Ω ch·ªânh s·ª≠a theo y√™u c·∫ßu c·ªßa b·∫°n")
            
            if edit_with_llm and edit_request.strip():
                with st.spinner("ü§ñ AI ƒëang ch·ªânh s·ª≠a XMindMark..."):
                    edited_content = agent.edit_xmindmark_with_llm(
                        st.session_state.xmindmark_content,
                        edit_request,
                        provider,
                        api_key,
                        model
                    )
                    
                    if edited_content != st.session_state.xmindmark_content:
                        st.session_state.xmindmark_content = edited_content
                        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                        svg_content = agent.convert_xmindmark_to_svg_cli(edited_content, f"mindmap_ai_edit_{timestamp}")
                        st.session_state.mindmap_svg = svg_content
                        st.success("‚úÖ AI ƒë√£ ch·ªânh s·ª≠a th√†nh c√¥ng!")
                        st.rerun()
                    else:
                        st.info("‚ÑπÔ∏è Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c th·ª±c hi·ªán.")
            elif edit_with_llm and not edit_request.strip():
                st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p y√™u c·∫ßu ch·ªânh s·ª≠a.")
            
            st.divider()
            
            st.markdown("### ‚úèÔ∏è Ch·ªânh s·ª≠a th·ªß c√¥ng")
            with st.form(key="manual_edit_form", clear_on_submit=False):
                edited_content = st.text_area(
                    "N·ªôi dung file XMindMark (c√≥ th·ªÉ ch·ªânh s·ª≠a):",
                    value=st.session_state.xmindmark_content,
                    height=300,
                    help="Nh·∫•n Ctrl+Enter ho·∫∑c click 'C·∫≠p nh·∫≠t' ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi"
                )
                
                col_update, col_auto = st.columns([1, 2])
                with col_update:
                    update_clicked = st.form_submit_button("üîÑ C·∫≠p nh·∫≠t", type="primary")
                with col_auto:
                    st.caption("üí° Tip: Nh·∫•n Ctrl+Enter ƒë·ªÉ c·∫≠p nh·∫≠t nhanh")
            
            if update_clicked and edited_content != st.session_state.xmindmark_content:
                with st.spinner("üîÑ ƒêang c·∫≠p nh·∫≠t mindmap..."):
                    st.session_state.edit_history = st.session_state.edit_history[:st.session_state.history_index + 1]
                    st.session_state.edit_history.append(edited_content)
                    st.session_state.history_index += 1
                    if len(st.session_state.edit_history) > 50:
                        st.session_state.edit_history.pop(0)
                        st.session_state.history_index -= 1
                    st.session_state.xmindmark_content = edited_content
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                    svg_content = agent.convert_xmindmark_to_svg_cli(edited_content, f"mindmap_manual_edit_{timestamp}")
                    st.session_state.mindmap_svg = svg_content
                st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t n·ªôi dung XMindMark v√† ·∫£nh mindmap!")
                st.rerun()
            elif update_clicked and edited_content == st.session_state.xmindmark_content:
                st.info("‚ÑπÔ∏è N·ªôi dung kh√¥ng thay ƒë·ªïi.")
            
            st.divider()
            st.markdown("### üîÑ Undo/Redo")
            col_undo, col_redo, col_original = st.columns(3)

            with col_undo:
                undo_disabled = st.session_state.history_index <= 0
                if st.button("‚è™ Undo", disabled=undo_disabled, help="Ho√†n t√°c thay ƒë·ªïi tr∆∞·ªõc ƒë√≥"):
                    if st.session_state.history_index > 0:
                        st.session_state.history_index -= 1
                        st.session_state.xmindmark_content = st.session_state.edit_history[st.session_state.history_index]
                        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                        svg_content = agent.convert_xmindmark_to_svg_cli(st.session_state.xmindmark_content, f"mindmap_undo_{timestamp}")
                        st.session_state.mindmap_svg = svg_content
                        st.rerun()

            with col_redo:
                redo_disabled = st.session_state.history_index >= len(st.session_state.edit_history) - 1
                if st.button("‚è© Redo", disabled=redo_disabled, help="L√†m l·∫°i thay ƒë·ªïi ƒë√£ ho√†n t√°c"):
                    if st.session_state.history_index < len(st.session_state.edit_history) - 1:
                        st.session_state.history_index += 1
                        st.session_state.xmindmark_content = st.session_state.edit_history[st.session_state.history_index]
                        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                        svg_content = agent.convert_xmindmark_to_svg_cli(st.session_state.xmindmark_content, f"mindmap_redo_{timestamp}")
                        st.session_state.mindmap_svg = svg_content
                        st.rerun()

            with col_original:
                if st.button("üìú Xem Mindmap G·ªëc", help="Hi·ªÉn th·ªã mindmap ban ƒë·∫ßu"):
                    if st.session_state.original_xmindmark:
                        st.session_state.xmindmark_content = st.session_state.original_xmindmark
                        st.session_state.edit_history.append(st.session_state.original_xmindmark)
                        st.session_state.history_index += 1
                        if len(st.session_state.edit_history) > 50:
                            st.session_state.edit_history.pop(0)
                            st.session_state.history_index -= 1
                        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                        svg_content = agent.convert_xmindmark_to_svg_cli(st.session_state.original_xmindmark, f"mindmap_original_{timestamp}")
                        st.session_state.mindmap_svg = svg_content
                        st.rerun()
                    else:
                        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ mindmap g·ªëc n√†o ƒë∆∞·ª£c l∆∞u.")

            st.divider()
            st.markdown("### ‚ùì Truy v·∫•n Mindmap G·ªëc")
            query = st.text_input("Nh·∫≠p c√¢u h·ªèi v·ªÅ mindmap g·ªëc:", placeholder="V√≠ d·ª•: C√°c nh√°nh ch√≠nh c·ªßa mindmap g·ªëc l√† g√¨?")
            if query and st.session_state.original_xmindmark:
                with st.spinner("ü§ñ ƒêang x·ª≠ l√Ω c√¢u h·ªèi..."):
                    prompt = f"""
                    D·ª±a tr√™n n·ªôi dung XMindMark g·ªëc sau, tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
                    N·ªôi dung XMindMark:
                    {st.session_state.original_xmindmark}
                    C√¢u h·ªèi: {query}
                    H∆Ø·ªöNG D·∫™N:
                    - Tr·∫£ l·ªùi ng·∫Øn g·ªçn, ch√≠nh x√°c, t·∫≠p trung v√†o c√¢u h·ªèi
                    - N·∫øu c·∫ßn, li·ªát k√™ c√°c nh√°nh ho·∫∑c chi ti·∫øt li√™n quan
                    """
                    response = agent.llm_provider.call_llm(prompt, model)
                    st.write("**Tr·∫£ l·ªùi:**")
                    st.write(response)
            elif query and not st.session_state.original_xmindmark:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ mindmap g·ªëc ƒë·ªÉ truy v·∫•n.")

        st.divider()
        st.subheader("üíæ T·∫£i xu·ªëng file")
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        base_filename = f"mindmap_{timestamp}"
        
        col_download1, col_download2, col_download3 = st.columns(3)
        
        with col_download1:
            st.download_button(
                label="üìÑ T·∫£i .xmindmark",
                data=st.session_state.xmindmark_content,
                file_name=f"{base_filename}.xmindmark",
                mime="text/plain",
                help="T·∫£i file XMindMark (ƒë·ªãnh d·∫°ng text)"
            )
        
        with col_download2:
            if st.session_state.mindmap_svg:
                svg_bytes = agent.save_svg_file(st.session_state.mindmap_svg, base_filename)
                if svg_bytes:
                    st.download_button(
                        label="üñºÔ∏è T·∫£i .svg",
                        data=svg_bytes,
                        file_name=f"{base_filename}.svg",
                        mime="image/svg+xml",
                        help="T·∫£i ·∫£nh mindmap ƒë·ªãnh d·∫°ng SVG"
                    )
            else:
                st.button("üñºÔ∏è T·∫£i .svg", disabled=True, help="Ch∆∞a c√≥ ·∫£nh SVG")
        
        with col_download3:
            if agent.check_xmindmark_cli():
                if st.button("üß† T·∫°o & T·∫£i .xmind", help="Chuy·ªÉn ƒë·ªïi sang XMind b·∫±ng CLI"):
                    with st.spinner("üîÑ ƒêang chuy·ªÉn ƒë·ªïi sang XMind b·∫±ng CLI..."):
                        xmind_content = agent.convert_xmindmark_to_xmind_cli(
                            st.session_state.xmindmark_content, 
                            base_filename
                        )
                        if xmind_content:
                            st.download_button(
                                label="üíæ T·∫£i file XMind",
                                data=xmind_content,
                                file_name=f"{base_filename}.xmind",
                                mime="application/vnd.xmind",
                                key=f"download_xmind_{timestamp}"
                            )
                            st.success("‚úÖ File XMind ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng b·∫±ng CLI!")
                        else:
                            st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o file XMind. Ki·ªÉm tra log ph√≠a tr√™n.")
            else:
                st.button("üß† T·∫°o & T·∫£i .xmind", disabled=True, help="XMindMark CLI ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        
        st.info("""
        üìã **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c√°c file:**
        - **üìÑ .xmindmark**: File text c√≥ th·ªÉ ch·ªânh s·ª≠a, import v√†o c√°c tool kh√°c
        - **üñºÔ∏è .svg**: ·∫¢nh vector c√≥ th·ªÉ xem trong browser, ch√®n v√†o document
        - **üß† .xmind**: File g·ªëc c·ªßa XMind, ƒë∆∞·ª£c t·∫°o b·∫±ng CLI ch√≠nh th·ª©c
        
        **ü§ñ T√≠nh nƒÉng ch·ªânh s·ª≠a b·∫±ng AI:**
        - Nh·∫≠p y√™u c·∫ßu ch·ªânh s·ª≠a b·∫±ng ng√¥n ng·ªØ t·ª± nhi√™n
        - AI s·∫Ω hi·ªÉu context v√† th·ª±c hi·ªán thay ƒë·ªïi ph√π h·ª£p
        - Mindmap s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t sau khi ch·ªânh s·ª≠a
        
        **‚ö†Ô∏è L∆∞u √Ω v·ªÅ XMindMark CLI:**
        - C·∫ßn c√†i ƒë·∫∑t Node.js v√† ch·∫°y: `npm install -g xmindmark`
        - CLI t·∫°o SVG v√† XMind ch·∫•t l∆∞·ª£ng cao h∆°n
        - N·∫øu kh√¥ng c√≥ CLI, s·∫Ω d√πng ph∆∞∆°ng th·ª©c d·ª± ph√≤ng (Graphviz)
        """)